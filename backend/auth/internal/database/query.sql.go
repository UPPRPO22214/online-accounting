// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const checkUserByID = `-- name: CheckUserByID :one
SELECT COUNT(*) > 0 AS user_exists
FROM users
WHERE id = ?
`

func (q *Queries) CheckUserByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserByID, id)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, email, password_hash)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	ID           int32
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.ID, arg.Email, arg.PasswordHash)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash
FROM users
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.PasswordHash)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE users
SET password_hash = ?
WHERE id = ?
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           int32
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
}
